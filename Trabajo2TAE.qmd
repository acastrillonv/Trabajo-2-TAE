---
title: "Modelo de riesgo de crédito"
author: "Valentina Vanegas Castaño <br> Edwar Jose Londoño Correa <br> Andres Castrillón Velasquez <br> Diego Andres Chavarria Riaño <br> Sebastian Rendon Arteaga"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,message = F,warning = F)
```

```{r}
#install.packages('ROSE')
#install.packages('scorecard')
library(ROSE)
library(scorecard)
library(pander)
library(kableExtra)
```

## 1- Contexto del problema

Los bancos al ser prestamistas , poseen el riesgo de tener perdidas con los créditos dados, ya que pueden existir clientes que sean morosos con los pagos. Se desea crear un modelo que permita predecir, mediante un score calculado con la información del usuario que desea un crédito, la probabilidad de incumplimiento de sus obligaciones financieras en los siguientes 12 meses a la fecha de originación de su crédito. Este modelo ayudaría en a los bancos en sus tomas de decisiones sobre sus clientes. Para la creación del modelo, se uso utilizó un trabajo realizado por Ng Yong Kad (2020), y también la documentación sobre la librería scorecard obtenida por CRAN (2022).

Para la creación del modelo, se utiliza un dataset que posee 45 variables y 466285 registros.

```{r}
# Se carga el dataset
d1<- read.csv("loan_data_2007_2014-1.csv", encoding = "UTF-8")
d2<- read.csv("loan_data_2007_2014-2.csv", encoding = "UTF-8")
d3<- read.csv("loan_data_2007_2014-3.csv", encoding = "UTF-8")
daux<- rbind(d1,d2)
data <- rbind(daux,d3)
```

## 2- Procesamiento de los datos

Inicialmente se eliminan variables que poseen un gran número o en su totalidad valores representados con N/A. También se eliminan variables que no son predictoras, como las variables de identificación, url de una página, entre otras.

Teniendo en cuenta lo anterior, se eliminan las variables : dti_joint, open_il_6m, open_il_24m, total_bal_il, open_rv_12m, max_bal_bc, total_cu_tl, annual_inc_joint, verification_status_joint, open_acc_6m, open_il_12m, mths_since_rcnt_il, il_util, open_rv_24m, all_util, inq_fi, inq_last_12m,id, member_id, url, desc, zip_code, application_type, policy_code, mths_since_last_delinq, mths_since_last_record, mths_since_last_major_derog, tot_coll_amt, tot_cur_bal, total_rev_hi_lim.

También se eliminan las variables: funded_amnt, funded_amnt_inv, dti, delinq_2yrs, revol_bal, revol_util, total_acc, out_prncp, out_prncp_inv, total_pymnt, total_pymnt_inv, total_rec_prncp, total_rec_int, total_rec_late_fee, recoveries, collection_recovery_fee, last_pymnt_amnt, collections_12_mths_ex_med, grade, pymnt_plan, initial_list_status, ya que son variables que no se pueden utilizar para predecir si a una persona que se le va a otorgar el crédito, cumpla o no con este.

```{r}
# Se eliminan algunas variables
data <- subset(data,select = -c(dti_joint, open_il_6m, open_il_24m, total_bal_il, open_rv_12m, max_bal_bc, total_cu_tl, annual_inc_joint, verification_status_joint, open_acc_6m, open_il_12m, mths_since_rcnt_il, il_util, open_rv_24m, all_util, inq_fi, inq_last_12m, id, url, desc, zip_code, application_type, member_id, policy_code, addr_state, sub_grade, emp_title, issue_d, title, mths_since_last_delinq, mths_since_last_record, mths_since_last_major_derog, tot_coll_amt, tot_cur_bal, total_rev_hi_lim, funded_amnt, funded_amnt_inv, dti, delinq_2yrs, revol_bal, revol_util, total_acc, out_prncp, out_prncp_inv, total_pymnt, total_pymnt_inv, total_rec_prncp, total_rec_int, total_rec_late_fee,  recoveries, collection_recovery_fee, last_pymnt_amnt, collections_12_mths_ex_med, grade, pymnt_plan, initial_list_status))
```

Adicionalmente, en el dataset tenemos variables de tipo numéricas y de tipo character, para facilidad en el trabajo, se cambian las variables de tipo character a factor.

```{r}
# Se transforman las variables de tipo character a factor.
data$term <- as.factor(data$term)
data$emp_length <- as.factor(data$emp_length)
data$verification_status <- as.factor(data$verification_status)
data$loan_status <- as.factor(data$loan_status)
data$purpose <- as.factor(data$purpose)
data$home_ownership <- as.factor(data$home_ownership)
```

```{r}
# Se divide el dataset por el tipo de variable.
variables_num <- sapply(data, is.numeric)
data_num <- data[variables_num]
variables_cat <- sapply(data, is.factor)
data_cat <- data[variables_cat]
#Se separa la variable loan_status de las demás variables categóricas.
Y<- subset(data_cat, select = loan_status)
data_cat <- subset(data_cat, select = -c(loan_status))
```

Para este trabajo, se va a trabajar con las siguientes variables:

-   Loan_amnt: Cantidad de dinero solicitado por el prestatario.

-   Int_rate: Tasa de interés.

-   Installment: Pago mensual adeudado por el prestatario si se origina el préstamo.

-   Annual_inc: Ingresos anuales reportados por el prestatario.

-   Inq_last_6mths: Número de veces que el prestatario ha solicitado préstamos durante los últimos 6 meses.

-   Open_acc: Créditos abiertos del prestatario.

-   Pub_rec: Número de reportes públicos del prestatario.

-   Acc_now_delinq: Número de cuentas en las que el prestatario esta en mora.

-   Term: Cantidad de cuotas.

-   Emp_length: Cantidad de años que el prestatario lleva trabajando.

-   Home_ownership: Estado en que se encuentra la vivienda del prestatario.

-   Verification_status: Verificación de los ingresos conjuntos de los copretatarios.

-   Purpose: Propósito del crédito.

-   Loan_status : Estado actual del prestamo, esta es la variable objetivo que indica si la persona cumple o incumple con el pago del crédito.

### 2.1- Análisis de Variables numéricas

Se modifican los valores de las variables numéricas que posean pocos valores N/A, por el valor de la mediana de cada atributo.

```{r}
data_num$annual_inc[is.na(data_num$annual_inc)] <- 63000
data_num$inq_last_6mths[is.na(data_num$inq_last_6mths)] <- 0.0000
data_num$open_acc[is.na(data_num$open_acc)] <- 10.00
data_num$pub_rec[is.na(data_num$pub_rec)] <- 0.0000
data_num$acc_now_delinq[is.na(data_num$acc_now_delinq)] <- 0.000000

```

También se analiza la existencia de datos atípicos en las variables numéricas. Para esto se crea una función que permita identificar las variables que poseen datos atípicos, y estos se escalan de la siguiente forma:

-   Los que se encuentran por encima del rango máximo, se escalan al percentil 95.

-   Los que se encuentran debajo del mínimo, se escalan al percentil 5.

```{r}

#Función para cambiar valores outliers.
eliminacion_out <- function(data){

  dimen <- dim(data)[2]
  
  if(dimen == 1){
    vector <- c(1)  
  }else{
    vector <- 1:dimen
  }
  for (variable in vector){
    x <- data[,variable]   
    qnt <- quantile(x, probs=c(.25, .75), na.rm = T)
    caps <- quantile(x, probs=c(.05, .95), na.rm = T)
    H <- 1.5 * IQR(x, na.rm = T)
    x[x < (qnt[1] - H)] <- caps[1]
    x[x > (qnt[2] + H)] <- caps[2]
    
    data[,variable] <- x
  }
  return(data)
}

#Se aplican la función eliminacion_out() a las variables numéricas.
data_num <- eliminacion_out(data_num)
```

### 2.2- Modificación de la variable objetivo

En el dataset, la variable objetivo es la columna **"loan_status"**, en esta se encuentran los siguientes valores:

-   Current

-   Fully Paid.

-   Late (31-120 days).

-   In Grace Period.

-   Does not meet the credit policy. Status:Fully Paid.

-   Late (16-30 days).

-   Default.

-   Does not meet the credit policy. Status:Charged Off.

Para la creación de este modelo, las variables **"Default"** y **"Late (31-120 days)"** serán clasificadas como **"Cumple"**, y las demás como **"Incumple"**.

```{r}
#función para la transformación de la variable loan_status
transformacion_varialeObjetivo <- function(valor){
  valor_nuevo <- ""
  if ((as.character(valor) == "Late (31-120 days)") | (as.character(valor) == "Default")){
    valor_nuevo <- "Incumple"
  }else{
    valor_nuevo <- "Cumple"
  }
  return(valor_nuevo)
}

#Se aplica la función creada a la variable loan_status.
Y$loan_status <- sapply(Y$loan_status,transformacion_varialeObjetivo)
Y$loan_status <- as.factor(Y$loan_status)
```

En la Tabla 1, se observa la cantidad de registros que poseen calificación **"Cumple"** e **"Incumple"**.

```{r}
conteo_y= dplyr::count(Y, Y$loan_status, sort = TRUE)
colnames(conteo_y) <- c('Variable objetivo loan_status','Cantidad')

kable(conteo_y,caption = "Cantidad de registros categorizados") %>% 
  kable_styling(full_width = F,position = "center") %>% 
  kable_minimal()
```

<center>**Tabla 1.** Tabla del conteo de la variable loan_status</center>

<br>

```{r}
#Se unen los datos numéricos con los datos categóricos
datos <- cbind(data_num,data_cat,Y)
```

Debido al desbalanceo que se presenta en los registros, se utiliza la "ovun.sample" de la librería ROSE. Esta función permite crear "muestras posiblemente equilibradas mediante ejemplos minoritarios de sobremuestreo aleatorio, ejemplos mayoritarios de submuestreo o una combinación de sobremuestreo y submuestreo" (Lunardon, Menardi y Torelli, 2022). En la Tabla 2, se observa lo anterior:

```{r}
#Balanceo de los datos
datos_balanceados <- ovun.sample(loan_status ~ ., data = datos, method = "over")$data
```

```{r}
conteo_y2= dplyr::count(datos_balanceados, datos_balanceados$loan_status, sort = TRUE)
colnames(conteo_y2) <- c('Variable objetivo loan_status','Cantidad')

kable(conteo_y2,caption = "Cantidad de registros categorizados balanceados") %>% 
  kable_styling(full_width = F,position = "center") %>% 
  kable_minimal()
```

<center>**Tabla 2.** Tabla del nuevo conteo de la variable loan_status</center>

<br>

Debido a la alta cantidad de registros que existen en el dataset, se procede a usar una muestra del 8% de todo el dataset para la creación del modelo, esto debido a la capacidad de cómputo que requiere el modelo para poder trabajar con toda esta cantidad de observaciones.

```{r}
set.seed(20)
n_muestra <- dim(datos_balanceados)[1]
p <- 0.08 # proporción de datos para el nuevo dataset
ix <- sample(n_muestra,size = round(n_muestra*p),
                replace = FALSE)
datos_muestra <- datos_balanceados[ix,]
```

## 3- Scorecards

Para la creación del scorecard, se utiliza un liberia llamada "Scorecard", la cual permite mediante sus funciones poder crear el modelo de riesgo de crédito de manera óptima y eficiente con las funciones que ya vienen integradas.

Como primer paso, se realiza un filtrado de los datos ya procesados anteriormente utilizando la función "var_filter". Esta función permite. filtrar la información de acuerdo a condiciones específicas, como el valor de la información, la tasa de faltantes, la tasa de valores idénticos, entre otras condiciones. Como resultado, las variables seleccionadas son:

-   Loan_amnt: Cantidad de dinero solicitado por el prestatario.

-   Int_rate: Tasa de interés.

-   Installment: Pago mensual adeudado por el prestatario si se origina el préstamo.

-   Annual_inc: Ingresos anuales reportados por el prestatario.

-   Open_acc: Créditos abiertos del prestatario.

-   Term: Cantidad de cuotas.

-   Verification_status: Verificación de los ingresos conjuntos de los copretatarios.

-   Purpose: Propósito del crédito.

-   Loan_status : Estado actual del prestamo, esta es la variable objetivo que indica si la persona cumple o incumple con el pago del crédito.

Cabe destacatar que la anterior selección no siempre es la misma, esto debido a la forma en que la función opera para seleccionar las variables adecuadas.

Luego, se procede a la creación de los contenedores finos por variable (o en ingles fine bins). Esto se realiza con la función woebin, la cual, genera un agrupamiento óptimo para variables numéricas, de factores y categóricas utilizando métodos que incluyen la segmentación en forma de árbol o la combinación de chi-cuadrado.

Y luego, se obtienen los valores woe para cada registro por cada una de sus variables, utilizando los bins y los datos filtrados previamente ya calculados.

```{r}
datos_sel = var_filter(datos_muestra, "loan_status", positive = 'Incumple')
bins = woebin(datos_sel, "loan_status", positive = '1')
datos_woe = woebin_ply(datos_sel, bins)
```

Ya por último, se obtiene el objeto denominado **"Card"**, el cual nos permite obtener el score de acuerdo a los valores de las variables.

```{r}
# Se ajusta un modelo lineal
m = glm(loan_status ~ ., family = binomial(), data = datos_woe)

# Se seleccione un modelo basado en fórmulas por AIC
m_step = step(m, direction="both", trace=FALSE)

m2 = eval(m_step$call)

# Card
card = scorecard(bins, m2)

# Scord para cada registro del dataset datos_muestra
score1 = scorecard_ply(datos_muestra, card)

# Scord para cada registro del dataset datos_muestra y para variable
score2 = scorecard_ply(datos_muestra, card, only_total_score = FALSE)
```

### 3.1- Análisis de las variables empledas en el modelo

```{r}
pander(summary(m))
```

<center>**Tabla 3.** Tabla de resumen de las variables usadas en el modelo</center>

<br>

Por medio de la Tabla 3, identificamos las variables que hacen mas riesgosa a una persona. Estas son aquellas que tienen un p-valor menor al valor de significancia (0.05) en la columna Pr(\>\|z\|).

Podemos notar que las variables cuyo valor p son mayor a 0.05, no son de importancia para el modelo, estas son "loan_amnt" y "term". A continuación, se eliminan dichas variables, y se vuelve a crear el modelo.

También se puede observar en la Tabla 3, que la relación de las variables seleccionadas, con respecto a la variable objetivo, en todos los casos es positiva.

```{r}

#Se vuelve a crear el modelo scorecard

dataos_selec2 <- subset(datos_sel, select = -c(loan_amnt,term))
bins2 = woebin(dataos_selec2, "loan_status", positive = '1')
datos_woe2 = woebin_ply(dataos_selec2, bins2)

# Se ajusta un modelo lineal
m_2 = glm(loan_status ~ ., family = binomial(), data = datos_woe2)

# Se seleccione un modelo basado en fórmulas por AIC
m_step2 = step(m_2, direction="both", trace=FALSE)

m22 = eval(m_step2$call)

# Card
card_nuevo = scorecard(bins2, m22)

# Scord para cada registro del dataset datos_muestra
score12 = scorecard_ply(datos_muestra, card_nuevo)

# Scord para cada registro del dataset datos_muestra y para variable
score22 = scorecard_ply(datos_muestra, card_nuevo, only_total_score = FALSE)
```

```{r}
#Si se deseea guardar el modelo, se debe ejecutar las siguientes lineas

#save(card_nuevo, file = "card_nuevo.RData")
#save(dataos_selec2, file = "datos_muestra.RData")
```

### 3.2- Análisis del modelo obtenido

Una vez obtenido el modelo que genera el score, se analiza con la siguiente gráfica el score asociado con la probabilidad de incumplimiento de pago del cliente.

```{r}
dato_fit <- fitted(m22)
plot(score12$score, dato_fit, main = "Curva de score con respecto a la probabilidad de incumpliemto", xlab = "Score", ylab = "Probabilidad de incumplimiento", col = "purple")
grid()
```

<center>**Figura 1.** Curva de score con respecto a la probabilidad de incumpliemto</center>

<br>

En Figura 1, podemos observar que a medida que la probabilidad se vuelve 0 (Cliente cumple con el pago del crédito), el valor del score tiende a crecer. Mientras que cuando probabilidad se vuelve 1 (Cliente incumple con el pago del crédito), el score tiende a disminuir.

```{r}
#Analisis del score de la población

pander(summary(score12$score))
```

<center>**Tabla 4.** Descripción del score de los datos trabajados</center>

<br>

También podemos observar en la Tabla 4 valores obtenidos al calcular el score a cada uno de los registros del dataset trabajado, vemos que el score minimo, el score maximo , el score promedio, entre otros.

## 4- Links

-   Para conocer la aplicación web que creamos utilizando el modelo creado, haz click, <a href='https://sebasrendon12.shinyapps.io/myapp2/' target="_blank"> aquí </a> .

-   Para conocer el video donde explicamos acerca del funcionamiento de la aplicación, haz click, <a href='https://youtu.be/zIcxs7rd_9g' target="_blank"> aquí </a> .

## 5- Referencias

-   Ng Yong Kad. (2020). Credit Scoring Development Using R. 2022, 15 de ocubre 2022, de rpubs. Sitio web: https://rpubs.com/ngyongkad/scorecard

-   CRAN. (2022). Package 'scorecard'. 2022, 15 de ocubre 2022, de Package 'scorecard'. Sitio web: https://cran.r-project.org/web/packages/scorecard/scorecard.pdf

-   Lunardon N., Menardi G. & Torelli N.. (2022). Package 'ROSE'. 2022, noviembre 5, de cran.r. Sitio web: https://cran.r-project.org/web/packages/ROSE/ROSE.pdf
