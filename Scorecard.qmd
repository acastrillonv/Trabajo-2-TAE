---
title: "Scorecard"
author: "Valentina Vanegas Castaño, Edwar Jose Londoño Correa, Andres Castrillón Velasquez, Diego Andres Chavarria Riaño, Sebastian Rendon Arteaga"
format: html
editor: visual
---

## Carga del dataset

```{r}
d1<- read.csv("loan_data_2007_2014-1.csv", encoding = "UTF-8")
d2<- read.csv("loan_data_2007_2014-2.csv", encoding = "UTF-8")
d3<- read.csv("loan_data_2007_2014-3.csv", encoding = "UTF-8")
daux<- rbind(d1,d2)
data <- rbind(daux,d3)
```

## Preprocesamiento inicial de los datos

Se eliminan las variables: dti_joint, open_il_6m, open_il_24m, total_bal_il, open_rv_12m, max_bal_bc, total_cu_tl, annual_inc_joint, verification_status_joint, open_acc_6m, open_il_12m, mths_since_rcnt_il, il_util, open_rv_24m, all_util, inq_fi, inq_last_12m,id, member_id, url, desc, zip_code, application_type, policy_code.

```{r}
data <- subset(data,select = -c(dti_joint, open_il_6m, open_il_24m, total_bal_il, open_rv_12m, max_bal_bc, total_cu_tl, annual_inc_joint, verification_status_joint, open_acc_6m, open_il_12m, mths_since_rcnt_il, il_util, open_rv_24m, all_util, inq_fi, inq_last_12m, id, url, desc, zip_code, application_type, member_id, policy_code, addr_state, sub_grade, emp_title, issue_d, title))
```

En el dataset tenemos variables de tipo numericas y de tipo character, para facilidad en el trabajo, se cambian las variables de tipo character a factor.

```{r}
data$term <- as.factor(data$term)
data$grade <- as.factor(data$grade)

data$emp_length <- as.factor(data$emp_length)
data$verification_status <- as.factor(data$verification_status)

data$loan_status <- as.factor(data$loan_status)
data$pymnt_plan <- as.factor(data$pymnt_plan)
data$purpose <- as.factor(data$purpose)


data$initial_list_status <- as.factor(data$initial_list_status)
data$home_ownership <- as.factor(data$home_ownership)
```

Se procede a separar las variables en numéricas, de cadena y de tipo fecha

```{r}
variables_num <- sapply(data, is.numeric)
data_num <- data[variables_num]
variables_cat <- sapply(data, is.factor)
data_cat <- data[variables_cat]
```

## AnálisiVariable categóricas

Se separa la variable loan_status de las demás variables categóricas.

```{r}
Y<- subset(data_cat, select = loan_status)
data_cat <- subset(data_cat, select = -c(loan_status))
```

A continuación, se crean las variables dummys para cada variable categorica

```{r}
#library(caret)
#onehotencoding <- dummyVars(~.,data = data_cat)
#data_cat_dummy <- as.data.frame(predict(onehotencoding,data_cat))
```

## Análisis de Variable numéricas

Se eliminan las variables mths_since_last_delinq, mths_since_last_record, mths_since_last_major_derog, tot_coll_amt, tot_cur_bal, total_rev_hi_lim, por la cantidad tan elevada de valores N/A que poseen estas variables.

```{r}
data_num <- subset(data_num, select= -c(mths_since_last_delinq, mths_since_last_record, mths_since_last_major_derog, tot_coll_amt, tot_cur_bal, total_rev_hi_lim))
```

A continuación, se completa las variables numéricas que poseean valores N/A cambiandolas por el valor de la mediana de cada atributo.

```{r}
data_num$annual_inc[is.na(data_num$annual_inc)] <- 63000
data_num$delinq_2yrs[is.na(data_num$delinq_2yrs)] <- 0.0000
data_num$inq_last_6mths[is.na(data_num$inq_last_6mths)] <- 0.0000
data_num$open_acc[is.na(data_num$open_acc)] <- 10.00
data_num$pub_rec[is.na(data_num$pub_rec)] <- 0.0000
data_num$revol_util[is.na(data_num$revol_util)] <- 57.60
data_num$total_acc[is.na(data_num$total_acc)] <- 23.00
data_num$collections_12_mths_ex_med[is.na(data_num$collections_12_mths_ex_med)] <- 0.0000
data_num$acc_now_delinq[is.na(data_num$acc_now_delinq)] <- 0.000000

```

## Modificación de la variable objetivo

Se crea una función para la transformación de la variable loan_status.

```{r}
transformacion_varialeObjetivo <- function(valor){
  valor_nuevo <- ""
  if ((as.character(valor) == "Late (31-120 days)") | (as.character(valor) == "Default")){
    valor_nuevo <- "Incumple"
  }else{
    valor_nuevo <- "Cumple"
  }
  return(valor_nuevo)
}
```

Se aplica la función creada a la variable loan_status.

```{r}
Y$loan_status <- sapply(Y$loan_status,transformacion_varialeObjetivo)
Y$loan_status <- as.factor(Y$loan_status)
```

```{r}
dplyr::count(Y, Y$loan_status, sort = TRUE)
```

Se unen los datos numéricos con los datos categóricos

```{r}
datos <- cbind(data_num,data_cat,Y)
```

# Scorecards

```{r}
#install.packages('scorecard')
library(scorecard)
```

Para la creación del scorecard, se realiza un filtrado de los datos ya procesados anteriormente, .

```{r}
datos_sel = var_filter(datos, "loan_status", positive = 'Cumple')
```

Ya con los datos seleccionados, se procede a la creación de los contenedores finos por variable (o en ingles fine bins).

```{r}
bins = woebin(datos_sel, "loan_status", positive = '1')
```

A continuación se obtienen los woe o bin en función de la información de agrupamiento generada anteriormente.

```{r}
datos_woe = woebin_ply(datos_sel, bins)
```

```{r}
# glm ------
m = glm(loan_status ~ ., family = binomial(), data = datos_woe)

# Select a formula-based model by AIC
m_step = step(m, direction="both", trace=FALSE)

m = eval(m_step$call)

# scorecard
# Example I # creat a scorecard
card = scorecard(bins, m)


# credit score
# Example I # only total score
score1 = scorecard_ply(datos, card)

# Example II # credit score for both total and each variable
score2 = scorecard_ply(datos, card, only_total_score = FALSE)
```

# EJEMPLO

# load germancredit data

```{r}
data("germancredit")
```

```{r}
# filter variable via missing rate, iv, identical value rate
dt_sel = var_filter(germancredit, "creditability")
```

```{r}
# woe binning ------
bins = woebin(dt_sel, "creditability")
```

```{r}
dt_woe = woebin_ply(dt_sel, bins)
```

```{r}
# glm ------
m = glm(creditability ~ ., family = binomial(), data = dt_woe)

# Select a formula-based model by AIC
m_step = step(m, direction="both", trace=FALSE)

m = eval(m_step$call)

# scorecard
# Example I # creat a scorecard
card = scorecard(bins, m)

xnames = sub('_woe', '', names(coef(m))[-1])
card2 = scorecard2(bins=bins, dt=germancredit, y='creditability', x=xnames)

# credit score
# Example I # only total score
score1 = scorecard_ply(germancredit, card)

# Example II # credit score for both total and each variable
score2 = scorecard_ply(germancredit, card, only_total_score = FALSE)
## End(No test)
```

# No sirve

Se seleccionan las variables.

```{r}
data_num_s <- subset(data_num, select= c(annual_inc, inq_last_6mths, open_acc, pub_rec))
data_cat_s <- subset(data_cat, select= c (term, grade, purpose, home_ownership))
datos_s <- cbind(data_num_s,data_cat_s,datos$loan_status)
```

```{r}
pgrupos <- function(valor){
  if (valor <600000){
    nuevo = "Entre 0 y 600000"
  }else if ((valor >=600000) & (valor < 1200000)){
    nuevo = "Entre 600000 y 1200000"
  }else if ((valor >=1200000) & (valor < 1800000)){
    nuevo = "Entre 1200000 y 1800000"
  }else if ((valor >=1800000) & (valor < 2400000)){
    nuevo = "Entre 1800000 y 2400000"
  }else{
    nuevo = "Entre 2400000 y 7500000"
  }
  return(nuevo)
}
```

```{r}
annual_inc <- data.frame(datos_s$annual_inc, datos$loan_status)
annual_inc$grupo <- sapply(annual_inc$datos_s.annual_inc, pgrupos)
grupos <- dplyr::count(annual_inc, annual_inc$grupo, sort = TRUE)
grupos <- grupos[2]
```

Se crea la función para calcular el WoE.

```{r}
woe <- function(data, nombreVariable, grupo){
  
}
```

```{r}
dplyr::count(annual_inc, annual_inc$grupo, sort = TRUE)
```
